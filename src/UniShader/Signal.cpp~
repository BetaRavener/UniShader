#include <UniShader/Signal.h>

using UNISHADER_NAMESPACE;

SignalReceiver::SignalReceiver():
signalPtr(std::shared_ptr<SignalReceiver*>(new SignalReceiver*)){
	(*signalPtr) = this;
}

SignalReceiver::~SignalReceiver(){
	(*signalPtr) = 0;
}

SignalSender::SignalSender(){
}

SignalSender::~SignalSender(){
}

void SignalSender::subscribeReceiver(std::shared_ptr<SignalReceiver*>& ptr){
	for(std::deque<std::shared_ptr<SignalReceiver*>>::iterator it = m_subscReceivers.begin(); it != m_subscReceivers.end(); it++){
		//check for duplicate
		if((*it) == ptr)
			return;
	}
	m_subscReceivers.push_back(ptr);

	return;
}

void SignalSender::unsubscribeReceiver(std::shared_ptr<SignalReceiver*>& ptr){
	for(std::deque<std::shared_ptr<SignalReceiver*>>::iterator it = m_subscReceivers.begin(); it != m_subscReceivers.end(); it++){
		if((*it) == ptr){
			m_subscReceivers.erase(it);
			return;
		}
	}
}

void SignalSender::sendSignal(unsigned int signalID, const ObjectBase* ptr){
	std::deque<std::shared_ptr<SignalReceiver*>>::iterator it = m_subscReceivers.begin();

	while(it != m_subscReceivers.end()){
		if( *it ){
			(*(*it))->handleSignal(signalID, ptr);
			it++;
		}
		else{
			//if subscribed receiver doesn't exist anymore erase it
			it = m_subscReceivers.erase(it);
		}
	}
}