#include <UniShader/TypeResolver.h>

//see http://www.opengl.org/wiki/GLAPI/glGetActiveUniform

using UNISHADER_NAMESPACE;

bool TypeResolver::resolve(GLenum typeEnum, GLSLType& type){
	type.clear();
	switch(typeEnum){
	case GL_FLOAT:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 1;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_VEC2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_VEC3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_VEC4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;

	case GL_DOUBLE:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 1;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_VEC2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_VEC3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_VEC4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;

	case GL_INT:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 1;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;
	case GL_INT_VEC2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;
	case GL_INT_VEC3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;
	case GL_INT_VEC4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;

	case GL_UNSIGNED_INT:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 1;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;
	case GL_UNSIGNED_INT_VEC2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;
	case GL_UNSIGNED_INT_VEC3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;
	case GL_UNSIGNED_INT_VEC4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 1;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;

	case GL_FLOAT_MAT2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 2;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_MAT3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 3;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_MAT4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 4;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_MAT2x3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 2;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_MAT2x4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 2;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_MAT3x2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 3;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_MAT3x4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 3;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_MAT4x2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 4;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_FLOAT_MAT4x3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 4;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;

	case GL_DOUBLE_MAT2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 2;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_MAT3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 3;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_MAT4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 4;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_MAT2x3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 2;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_MAT2x4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 2;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_MAT3x2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 3;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_MAT3x4:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 4;
		type.m_columnCount = 3;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_MAT4x2:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 2;
		type.m_columnCount = 4;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;
	case GL_DOUBLE_MAT4x3:
		type.m_objectType = GLSLType::ObjectType::VALUE;
		type.m_columnSize = 3;
		type.m_columnCount = 4;
		type.m_dataType = GLSLType::DataType::DOUBLE;
		return SUCCESS;

	case GL_SAMPLER_1D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::ONE_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_SAMPLER_2D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::TWO_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_SAMPLER_3D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::THREE_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_SAMPLER_CUBE:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::CUBE_MAPPED;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;
	case GL_SAMPLER_BUFFER:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::BUFFER;
		type.m_dataType = GLSLType::DataType::FLOAT;
		return SUCCESS;

	case GL_INT_SAMPLER_1D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::ONE_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;
	case GL_INT_SAMPLER_2D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::TWO_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;
	case GL_INT_SAMPLER_3D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::THREE_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;
	case GL_INT_SAMPLER_CUBE:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::CUBE_MAPPED;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;
	case GL_INT_SAMPLER_BUFFER:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::BUFFER;
		type.m_dataType = GLSLType::DataType::INT;
		return SUCCESS;

	case GL_UNSIGNED_INT_SAMPLER_1D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::ONE_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;
	case GL_UNSIGNED_INT_SAMPLER_2D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::TWO_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;
	case GL_UNSIGNED_INT_SAMPLER_3D:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::THREE_DIMENSIONAL;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;
	case GL_UNSIGNED_INT_SAMPLER_CUBE:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::CUBE_MAPPED;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;
	case GL_UNSIGNED_INT_SAMPLER_BUFFER:
		type.m_objectType = GLSLType::ObjectType::SAMPLER;
		type.m_samplerType = GLSLType::SamplerType::BUFFER;
		type.m_dataType = GLSLType::DataType::UNSIGNED_INT;
		return SUCCESS;
		
	default:
		std::cerr << "ERROR: Unknown GLSL data type" << std::endl;
		return FAILURE;
	}
}