#include <UniShader/UniShader.h>
#include <UniShader/OpenGL.h>

using UNISHADER_NAMESPACE;

//TODO: for whole application, querry max values
//affects trnasform feedback separate, attributes,
//buffer sizes, texture sizes, samplers

//TODO: use bool return to stop something messy going on

//We are using C0x now for shared_ptr and weak_ptr, HELL YEAAAH (just to remind you to download new compiler) 
//and also those enum classes, but they will be introduced in VS11 so we for now we are using ugly classes

UniShader::UniShader():
m_program(0){

}

UniShader::~UniShader(){
}

void UniShader::connectProgram(ShaderProgram::Ptr& program){
	m_program = program;
}

void UniShader::disconnectProgram(){
	m_program = 0;
}

void UniShader::render(PrimitiveType primitiveType, unsigned int primitiveCount, unsigned int offset, bool wait){
	if(!m_program){
		std::cerr << "ERROR: No shader program connected." << std::endl;
		return;
	}
	ensureGlewInit();
	clearGLErrors();

	GLenum mode;
	
	switch(primitiveType){
	case PrimitiveType::POINTS:
		mode = GL_POINTS;
		break;
	case PrimitiveType::LINES:
		mode = GL_LINES;
		break;
	case PrimitiveType::LINE_STRIP:
		mode = GL_LINE_STRIP;
		break;
	case PrimitiveType::TRIANGLES:
		mode = GL_TRIANGLES;
		break;
	case PrimitiveType::TRIANGLE_STRIP:
		mode = GL_TRIANGLE_STRIP;
		break;
	default:
		std::cerr << "ERROR: Invalid primitive type" << std::endl;
		return;
	}

	m_program->activate(primitiveType, primitiveCount);
	glDrawArrays(mode, offset, primitiveCount);
	if(wait)
		glFinish();
	printGLError();
	m_program->deactivate();
}